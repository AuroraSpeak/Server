name: Release Build & Deploy

on:
  push:
    branches:
      - dev

permissions:
  contents: read
  packages: read

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install Frontend dependencies
        working-directory: frontend
        run: pnpm install

      - name: Run Semgrep scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/owasp-top-ten
            p/react
            p/go

      - name: Read version from backend
        id: get_version
        working-directory: backend
        run: echo "VERSION=$(go run cmd/version/main.go)" >> $GITHUB_ENV

      - name: Lowercase GitHub owner
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Build Frontend
        working-directory: frontend
        run: pnpm run build

      - name: Build Backend
        working-directory: backend
        run: |
          go mod download
          go build -o dist/auraspeak cmd/server/main.go

      - name: Prepare package layout
        run: |
          mkdir -p pkg/opt/auraspeak
          mkdir -p pkg/etc/systemd/system
          cp -r backend/dist/auraspeak pkg/opt/auraspeak/backend/
          cp -r frontend/dist pkg/opt/auraspeak/frontend/
          cp systemd/auraspeak.service pkg/etc/systemd/system/

      - name: Install fpm
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          sudo gem install --no-document fpm

      - name: Check service file exists
        run: test -f pkg/etc/systemd/system/auraspeak.service

      - name: Create .deb package
        run: |
          fpm -s dir -t deb \
            -n auraspeak \
            -v "${VERSION}" \
            --description "AuraSpeak Server App" \
            --deb-systemd pkg/etc/systemd/system/auraspeak.service \
            -C pkg .

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${OWNER_LC}/auraspeak:${VERSION} .

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PUSH_PAT }}

      - name: Push Docker image
        run: |
          docker push ghcr.io/${OWNER_LC}/auraspeak:${VERSION}

      - name: Prepare clean source archive
        run: |
          mkdir -p source
          cp -r backend/dist/auraspeak source/backend/
          cp -r frontend/dist source/frontend/
          tar -czf source.tar.gz -C source .

      - name: Generate changelog
        working-directory: backend
        run: |
          go install github.com/git-chglog/git-chglog/cmd/git-chglog@latest
          git-chglog -o CHANGELOG.md

      - name: Bump version, tag, and push using PAT
        env:
          GH_TOKEN: ${{ secrets.GH_PUSH_PAT }}
        run: |
          cd backend
          # Update version in version.go
          VERSION=$(go run cmd/version/main.go)
          NEW_VERSION=$(echo $VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          sed -i "s/Version = \"$VERSION\"/Version = \"$NEW_VERSION\"/" internal/version/version.go
          VERSION=$NEW_VERSION
          cd ..
          
          # Clone the repo fresh using the dev branch and PAT
          git clone --branch dev https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git repo
          cd repo
          
          git config user.name "AuraSpeak CI"
          git config user.email "ci@auraspeak.dev"
          
          cp ../backend/internal/version/version.go ./backend/internal/version/
          cp ../backend/CHANGELOG.md ./backend/
          
          git add backend/internal/version/version.go backend/CHANGELOG.md
          git commit -m "chore(release): v$VERSION [skip ci]"
          git tag "v$VERSION"
          
          git push origin dev --follow-tags

      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: AuraSpeak v${{ env.VERSION }}
          files: |
            *.deb
            source.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUSH_PAT }}
