name: Release Build & Deploy

on:
  push:
    branches:
      - dev

permissions:
  contents: read
  packages: read

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run Semgrep scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/owasp-top-ten
            p/react
            p/nodejs

      - name: Read version from package.json
        id: get_version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Lowercase GitHub owner
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Build Next.js app
        run: pnpm run build

      - name: Prepare package layout
        run: |
          mkdir -p pkg/opt/auraspeak
          mkdir -p pkg/etc/systemd/system
          cp -r .next public package.json pnpm-lock.yaml scripts systemd pkg/opt/auraspeak/
          cp systemd/auraspeak.service pkg/etc/systemd/system/

      - name: Install fpm
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          sudo gem install --no-document fpm

      - name: Check service file exists
        run: test -f pkg/etc/systemd/system/auraspeak.service

      - name: Create .deb package
        run: |
          fpm -s dir -t deb \
            -n auraspeak \
            -v "${VERSION}" \
            --description "AuraSpeak Next.js Server App" \
            --deb-systemd pkg/etc/systemd/system/auraspeak.service \
            -C pkg .

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${OWNER_LC}/auraspeak:${VERSION} .

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PUSH_PAT }}

      - name: Push Docker image
        run: |
          docker push ghcr.io/${OWNER_LC}/auraspeak:${VERSION}

      - name: Prepare clean source archive
        run: |
          mkdir -p source
          cp -r .next public package.json pnpm-lock.yaml scripts systemd source/
          tar -czf source.tar.gz -C source .

      - name: Generate changelog
        run: npx conventional-changelog -p angular -i CHANGELOG.md -s
        env:
          HUSKY: 0

      - name: Bump version, tag, and push using PAT
        env:
          GH_TOKEN: ${{ secrets.GH_PUSH_PAT }}
        run: |
          # Bump version without tagging
          pnpm version patch --no-git-tag-version
          VERSION=$(jq -r .version package.json)
          
          # Clone the repo fresh using the dev branch and PAT
          git clone --branch dev https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git repo
          cd repo
          
          git config user.name "AuraSpeak CI"
          git config user.email "ci@auraspeak.dev"
          
          cp ../package.json ../pnpm-lock.yaml ../CHANGELOG.md ./
          
          git add package.json pnpm-lock.yaml CHANGELOG.md
          git commit -m "chore(release): v$VERSION [skip ci]"
          git tag "v$VERSION"
          
          git push origin dev --follow-tags

      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: AuraSpeak v${{ env.VERSION }}
          files: |
            *.deb
            source.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUSH_PAT }}
