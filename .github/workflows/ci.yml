name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'
          
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Install dependencies
        run: go mod download
        
      - name: Run tests
        run: go test -v ./...
        
      - name: Run linter
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run

  build-deb:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'
          
      - name: Install fpm
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev rubygems build-essential
          sudo gem install fpm
          
      - name: Build binary
        run: |
          GOOS=linux GOARCH=amd64 go build -o auraspeak-backend cmd/main.go
          
      - name: Create DEB package
        run: |
          fpm -s dir -t deb \
            --name auraspeak-backend \
            --version ${{ github.sha }} \
            --description "AuraSpeak Backend Service" \
            --maintainer "AuraSpeak Team" \
            --url "https://github.com/auraspeak/backend" \
            --deb-systemd auraspeak-backend.service \
            auraspeak-backend=/usr/local/bin/ \
            config.yaml=/etc/auraspeak/ \
            .env.example=/etc/auraspeak/
            
      - name: Upload DEB package
        uses: actions/upload-artifact@v3
        with:
          name: auraspeak-backend-deb
          path: "*.deb"

  build-docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/auraspeak-backend:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/auraspeak-backend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/auraspeak-backend:latest
          cache-to: type=inline

  deploy:
    needs: [build-deb, build-docker]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download DEB package
        uses: actions/download-artifact@v3
        with:
          name: auraspeak-backend-deb
          
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Install DEB package
            sudo dpkg -i *.deb
            sudo systemctl daemon-reload
            sudo systemctl restart auraspeak-backend
            
            # Update Docker containers
            cd /opt/auraspeak
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            docker system prune -f 