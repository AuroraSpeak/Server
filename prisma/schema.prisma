// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas   = ["voice"]
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  fullName      String   @map("full_name")
  discriminator String   @default("0000") // Discord-like discriminator
  avatarUrl     String?  @map("avatar_url")
  status        String   @default("offline") // online, idle, dnd, offline
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  profile       Profile?
  servers       Server[]          @relation("CreatedBy")
  messages      Message[]
  serverMembers ServerMember[]
  reactions     MessageReaction[]
  voiceStates   VoiceState[]
  userRoles     UserRole[]
  invitations   Invitation[]

  @@schema("voice")
  @@map("users")
}

model Profile {
  id           String   @id
  fullName     String   @map("full_name")
  email        String
  avatarUrl    String?  @map("avatar_url")
  status       String   @default("offline") // online, idle, dnd, offline
  gameActivity String?  @map("game_activity")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  @@schema("voice")
  @@map("profiles")
}

model Server {
  id          String   @id @default(uuid())
  name        String
  icon        String?
  color       String
  boostLevel  Int      @default(0) @map("boost_level")
  createdById String?  @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  creator    User?          @relation("CreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  categories Category[]
  members    ServerMember[]
  roles      Role[]

  channels Channel[]
  invitations Invitation[]

  @@schema("voice")
  @@map("servers")
}

model Category {
  id        String   @id @default(uuid())
  serverId  String   @map("server_id")
  name      String
  position  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  server   Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channels Channel[]

  @@schema("voice")
  @@map("categories")
}

model Channel {
  id         String   @id @default(uuid())
  categoryId String   @map("category_id")
  name       String
  type       String // text, voice
  userLimit  Int?     @map("user_limit") // For voice channels
  bitrate    Int? // For voice channels
  position   Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  messages    Message[]
  voiceStates VoiceState[]

  serverId String? @map("server_id")
  server   Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@schema("voice")
  @@map("channels")
}

model Message {
  id             String   @id @default(uuid())
  channelId      String   @map("channel_id")
  userId         String?  @map("user_id")
  content        String
  isPinned       Boolean  @default(false) @map("is_pinned")
  isThread       Boolean  @default(false) @map("is_thread")
  threadParentId String?  @map("thread_parent_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  channel        Channel           @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user           User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  parentMessage  Message?          @relation("ThreadMessages", fields: [threadParentId], references: [id], onDelete: Cascade)
  threadMessages Message[]         @relation("ThreadMessages")
  files          MessageFile[]
  reactions      MessageReaction[]

  @@schema("voice")
  @@map("messages")
}

model MessageFile {
  id        String   @id @default(uuid())
  messageId String   @map("message_id")
  name      String
  type      String
  size      String
  url       String
  createdAt DateTime @default(now()) @map("created_at")

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@schema("voice")
  @@map("message_files")
}

model MessageReaction {
  id        String   @id @default(uuid())
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  emoji     String
  createdAt DateTime @default(now()) @map("created_at")

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("voice")
  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}

model ServerMember {
  id         String   @id @default(uuid())
  serverId   String   @map("server_id")
  userId     String   @map("user_id")
  nickname   String?
  // Changed from String[] to a single role string - we'll handle multiple roles in the application
  roleString String?  @map("role_string") // Comma-separated roles
  joinedAt   DateTime @default(now()) @map("joined_at")
  isBoosting Boolean  @default(false) @map("is_boosting")

  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("voice")
  @@unique([serverId, userId])
  @@map("server_members")
}

model VoiceState {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  channelId String   @map("channel_id")
  muted     Boolean  @default(false)
  deafened  Boolean  @default(false)
  speaking  Boolean  @default(false)
  video     Boolean  @default(false)
  streaming Boolean  @default(false)
  joinedAt  DateTime @default(now()) @map("joined_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@schema("voice")
  @@unique([userId, channelId])
  @@map("voice_states")
}

model Role {
  id               String   @id @default(uuid())
  serverId         String   @map("server_id")
  name             String
  color            String
  position         Int      @default(0)
  // Changed from String[] to a single permissions string
  permissionString String?  @map("permission_string") // Comma-separated permissions
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
  userRoles UserRole[]

  @@schema("voice")
  @@map("roles")
}

// New model to handle many-to-many relationship between users and roles
model UserRole {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@schema("voice")
  @@unique([userId, roleId])
  @@map("user_roles")
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  status    String   @default("pending") // pending, accepted, expired
  invitedBy User     @relation(fields: [invitedById], references: [id])
  invitedById String
  server    Server   @relation(fields: [serverId], references: [id])
  serverId  String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@schema("voice")
  @@index([email])
  @@index([token])
  @@index([invitedById])
  @@index([serverId])
}
